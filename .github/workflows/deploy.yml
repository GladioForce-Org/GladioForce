name: CI/CD Pipeline to deploy GladioForce Production Environment to AWS

#on event push or main branch Production
on:
  push:
    branches:
      - Production

jobs:
  validate-terraform:
    name: Validate Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.5

      - name: Initialize Terraform (No Backend)
        run: terraform init -backend=false
        working-directory: ./deploy

      - name: Validate Terraform
        run: terraform validate
        working-directory: ./deploy

      - name: Check Terraform Formatting
        run: terraform fmt -check
        working-directory: ./deploy

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: validate-terraform
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Decode and Save Service Key
        run: |
          echo "${{ secrets.SERVICE_KEY_BASE64 }}" | base64 -d > ./backend/gladio_backend/gladio_backend/ServiceKey.json

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'false'

      - name: Build and Push Image
        env:
          IMAGE_TAG: ${{ github.sha }}
          IMAGE_REPO: ${{ secrets.ECR_REPO }}
        run: |
          docker build --compress -t $IMAGE_REPO:$IMAGE_TAG backend/gladio_backend/.
          docker push $IMAGE_REPO:$IMAGE_TAG
          docker tag $IMAGE_REPO:$IMAGE_TAG $IMAGE_REPO:latest
          docker push $IMAGE_REPO:latest

      - name: Clean Up Service Key
        run: rm ./backend/gladio_backend/gladio_backend/ServiceKey.json

  build-angular-admin:
    name: Build Angular Frontend
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Dependencies
        run: npm install
        working-directory: ./frontend/admin_dashboard

      - name: Build Admin Angular Project
        run: npm run build -- --output-path=dist
        working-directory: ./frontend/admin_dashboard

      - name: Create Admin ZIP Archive
        run: |
          sudo apt install zip -y
          zip -r admin.zip ./*
        working-directory: ./frontend/admin_dashboard/dist/browser

      - name: Upload Admin ZIP Artifact
        uses: actions/upload-artifact@v3
        with:
          name: angular-admin
          path: ./frontend/admin_dashboard/dist/browser/admin.zip
  
  
  build-angular-data:
    name: Build Angular Frontend
    runs-on: ubuntu-latest
    needs: build-angular-admin
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Dependencies
        run: npm install
        working-directory: ./frontend/data_collectie

      - name: Build Data Angular Project
        run: npm run build -- --output-path=dist
        working-directory: ./frontend/data_collectie

      - name: Create Data ZIP Archive
        run: |
          sudo apt install zip -y
          zip -r data.zip ./*
        working-directory: ./frontend/data_collectie/dist/browser

      - name: Upload Data ZIP Artifact
        uses: actions/upload-artifact@v3
        with:
          name: angular-data
          path: ./frontend/data_collectie/dist/browser/data.zip

  production-apply:
    name: Run Terraform Apply for Production
    runs-on: ubuntu-latest
    needs: build-angular-data
    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}


      - name: Checkout code
        uses: actions/checkout@v3

      - name: Decode RSA Key
        run: |
          echo "${{ secrets.NGINX }}" | base64 -d > nginx.pem
          chmod 400 nginx.pem

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.5

      - name: Initialize Terraform
        run: terraform init
        working-directory: ./deploy

      - name: Apply Terraform Plan
        run: |
          export TF_VAR_ecr_image_api=${{ secrets.ECR_REPO }}:${{ github.sha }}
          terraform apply -var-file="00-project.tfvars" -auto-approve
        working-directory: ./deploy

  production-test:
    name: Test Production Application
    runs-on: ubuntu-latest
    needs: production-apply
    steps:
      - name: Wait for Environment
        run: sleep 180

      - name: Test Application Reachability
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://admin.gladioforce.org)
          if [ "$response" -eq 200 ]; then
            echo "https://admin.gladioforce.org is reachable."
          else
            echo "https://admin.gladioforce.org is not reachable. Exiting..."
            exit 1
          fi
        shell: bash


