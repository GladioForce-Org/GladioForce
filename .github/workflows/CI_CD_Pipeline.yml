name: CI/CD Pipeline for GladioForce

on:
  pull_request:
    branches:
      - production

jobs:
  validate-terraform:
    name: Validate Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.5

      - name: Initialize Terraform (No Backend)
        run: terraform init -backend=false
        working-directory: ./deploy

      - name: Validate Terraform
        run: terraform validate
        working-directory: ./deploy

      - name: Check Terraform Formatting
        run: terraform fmt -check
        working-directory: ./deploy

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: validate-terraform
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-venv
          python3 -m venv venv
          source venv/bin/activate
          pip install awscli

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Image
        env:
          IMAGE_TAG: ${{ github.sha }}
          IMAGE_REPO: ${{ secrets.ECR_REPO }}
        run: |
          docker build --compress -t $IMAGE_REPO:$IMAGE_TAG backend/gladio_backend/.
          docker push $IMAGE_REPO:$IMAGE_TAG
          docker tag $IMAGE_REPO:$IMAGE_TAG $IMAGE_REPO:latest
          docker push $IMAGE_REPO:latest

  production-plan:
    name: Run Terraform Plan for Production
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.5

      - name: Initialize Terraform
        run: terraform init
        working-directory: ./deploy

      - name: Run Terraform Plan
        run: |
          export TF_VAR_ecr_image_api=${{ secrets.ECR_REPO }}:${{ github.sha }}
          terraform plan -var-file="00-project.tfvars"
        working-directory: ./deploy

  production-apply:
    name: Run Terraform Apply for Production
    runs-on: ubuntu-latest
    needs: production-plan
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.5

      - name: Initialize Terraform
        run: terraform init
        working-directory: ./deploy

      - name: Apply Terraform Plan
        run: |
          export TF_VAR_ecr_image_api=${{ secrets.ECR_REPO }}:${{ github.sha }}
          terraform apply -var-file="00-project.tfvars" -auto-approve
        working-directory: ./deploy

  production-test:
    name: Test Production Application
    runs-on: ubuntu-latest
    needs: production-apply
    steps:
      - name: Wait for Environment
        run: sleep 180

      - name: Test Application Reachability
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://admin.gladioforce.org)
          if [ "$response" -eq 200 ]; then
            echo "https://admin.gladioforce.org is reachable."
          else
            echo "https://admin.gladioforce.org is not reachable. Exiting..."
            exit 1
          fi
        shell: bash

  production-destroy:
    name: Destroy Production Environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.5

      - name: Initialize Terraform
        run: terraform init
        working-directory: ./deploy

      - name: Destroy Terraform Environment
        run: |
          export TF_VAR_ecr_image_api=${{ secrets.ECR_REPO }}:${{ github.sha }}
          terraform destroy -var-file="00-project.tfvars" -auto-approve
        working-directory: ./deploy
